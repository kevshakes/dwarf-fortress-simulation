name: Test Dwarf Fortress Simulation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run core functionality tests
      run: |
        python test_working.py
    
    - name: Test CLI commands
      run: |
        python main.py --help || true
        python main.py --generate benchmark --ascii || true
    
    - name: Performance benchmark
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from test_working import test_performance
        if not test_performance():
            sys.exit(1)
        print('✅ Performance benchmark passed')
        "

  test-without-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Test without external dependencies
      run: |
        python test_working.py
    
    - name: Verify modular architecture
      run: |
        python -c "
        import sys
        sys.path.append('.')
        
        # Test core imports
        from core.config import GameConfig, Constants
        from world.world_state_simple import WorldState
        from entities.dwarf_simple import Dwarf
        from ai.pathfinding_simple import AStarPathfinder
        from utils.noise import PerlinNoise3D
        
        print('✅ All core modules import successfully')
        
        # Test basic functionality
        config = GameConfig(world_size=16, z_levels=5)
        world = WorldState(config.world_size, config.z_levels)
        dwarf = Dwarf(1, (5, 5, 2), world)
        pathfinder = AStarPathfinder(world, 50)
        noise = PerlinNoise3D(42)
        
        print('✅ All core systems initialize successfully')
        "

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff . || true
